name: Build and Release Go App

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Release Go App
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'

      # Install Git tools (for tagging)
      - name: Install Git
        run: sudo apt-get install git -y

      # Determine the next semantic version
      - name: Generate semantic version
        id: versioning
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag or set default if no tags exist
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          # Remove 'v' prefix and split into components
          latest_version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$latest_version"

          # Get commit messages since the latest tag
          if [ "$latest_tag" = "v0.0.0" ]; then
            commit_messages=$(git log --oneline)
          else
            commit_messages=$(git log "${latest_tag}"..HEAD --oneline)
          fi

          # Initialize variables to track version bumps
          major_bump=false
          minor_bump=false
          patch_bump=false

          # Check commit messages for version bump keywords
          while read -r line; do
            message=$(echo "$line" | cut -d' ' -f2-)
            if echo "$message" | grep -q "BREAKING CHANGE"; then
              major_bump=true
              break  # Breaking changes override other bumps
            elif echo "$message" | grep -qi "^feat"; then
              minor_bump=true
            elif echo "$message" | grep -qi "^fix"; then
              patch_bump=true
            fi
          done <<< "$commit_messages"

          # Determine which version number to increment
          if [ "$major_bump" = true ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$minor_bump" = true ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          # Construct the new tag
          new_tag="v$major.$minor.$patch"
          echo "New version: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # Build the Go app for macOS (64-bit)
      - name: Build macOS binary
        run: |
          GOOS=darwin GOARCH=amd64 go build -o Infor-test-mac

      # Build the Go app for Windows (64-bit)
      - name: Build Windows 64-bit binary
        run: |
          GOOS=windows GOARCH=amd64 go build -o Infor-test-windows.exe

      # Create a new Git tag for the version
      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      # Create a GitHub release with the new tag
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          draft: false
          prerelease: false

      # Upload the macOS binary to the release
      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Infor-test-mac
          asset_name: Infor-test-mac
          asset_content_type: application/octet-stream

      # Upload the Windows 64-bit binary to the release
      - name: Upload Windows 64-bit binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Infor-test-windows.exe
          asset_name: Infor-test-windows.exe
          asset_content_type: application/octet-stream